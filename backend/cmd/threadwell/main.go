// @title ThreadWell API
// @version 0.1
// @description Local threaded conversation backend
// @BasePath /api
package main

import (
    "log"
    "net/http"

    "github.com/swaggo/http-swagger"
    _ "github.com/krackenservices/threadwell/docs" // generated by swag init
    "github.com/krackenservices/threadwell/api"
    "github.com/krackenservices/threadwell/config"
    "github.com/krackenservices/threadwell/storage"
    "github.com/krackenservices/threadwell/storage/memory"
    "github.com/krackenservices/threadwell/storage/sqlite"
)

var store storage.Storage

func main() {
    cfg := config.Load()

    var err error
    switch cfg.Storage.Type {
    case "sqlite":
        store, err = sqlite.New(cfg.Storage.Path)
    case "memory":
        store = memory.New()
    default:
        log.Fatalf("unsupported storage type: %s", cfg.Storage.Type)
    }
    if err != nil {
        log.Fatalf("storage init error: %v", err)
    }

    mux := http.NewServeMux()
    api.RegisterRoutes(mux, store)

    mux.Handle("/swagger/", httpSwagger.WrapHandler)
    mux.HandleFunc("/swagger.json", func(w http.ResponseWriter, r *http.Request) {
        http.ServeFile(w, r, "./docs/swagger.json")
    })

    log.Println("Listening on :8080")
    if err := http.ListenAndServe(":8080", mux); err != nil {
        log.Fatal(err)
    }
}