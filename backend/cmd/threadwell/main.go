// @title ThreadWell API
// @version 0.1
// @description Local threaded conversation backend
// @BasePath /api
package main

import (
	"log"
	"net/http"

	"github.com/krackenservices/threadwell/api"
	"github.com/krackenservices/threadwell/config"
	_ "github.com/krackenservices/threadwell/docs" // generated by swag init
	"github.com/krackenservices/threadwell/storage"
	"github.com/krackenservices/threadwell/storage/memory"
	"github.com/krackenservices/threadwell/storage/sqlite"
	"github.com/rs/cors" // Import the new library
	"github.com/swaggo/http-swagger"
)

// The manual withCORS function is no longer needed and has been removed.

func main() {
	cfg := config.Load()

	var (
		store storage.Storage
		err   error
	)
	switch cfg.Storage.Type {
	case "sqlite":
		store, err = sqlite.New(cfg.Storage.Path)
	case "memory":
		store = memory.New()
	default:
		log.Printf("unsupported or undefined storage type: '%s' - Defaulting to Memory", cfg.Storage.Type)
		store = memory.New()
	}
	if err != nil {
		log.Fatalf("storage init error: %v", err)
	}

	apiHandler := api.RegisterRoutes(store)
	mux := http.NewServeMux()
	mux.Handle("/swagger/", httpSwagger.WrapHandler)
	mux.HandleFunc("/swagger.json", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "./docs/swagger.json")
	})
	mux.Handle("/", apiHandler)

	// Configure CORS using the library
	c := cors.New(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{http.MethodGet, http.MethodPost, http.MethodPut, http.MethodPatch, http.MethodDelete, http.MethodOptions},
		AllowedHeaders:   []string{"Content-Type", "Authorization"},
		AllowCredentials: true,
	})

	// Wrap your router with the CORS handler
	handler := c.Handler(mux)

	log.Println("Listening on :8001")
	if err := http.ListenAndServe(":8001", handler); err != nil {
		log.Fatal(err)
	}
}
